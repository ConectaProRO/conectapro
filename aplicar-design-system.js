const fs = require('fs');
const path = require('path');

class DesignSystemApplicator {
  constructor() {
    this.pagesDirectory = './src/app';
    this.componentImport = `import PageLayout, { PageCard, PageButton } from "../../components/PageLayout";`;
    this.appliedPages = [];
    this.pendingPages = [];
  }

  // Mapeamento de p√°ginas e suas configura√ß√µes
  getPageConfigs() {
    return {
      'cadastro-profissional/page.tsx': {
        title: 'üë∑ Cadastro de Profissional',
        subtitle: 'Cadastre-se gratuitamente e encontre mais clientes em Porto Velho',
        priority: 1
      },
      'precos-cub/page.tsx': {
        title: 'üí∞ Pre√ßos CUB Sinduscon',
        subtitle: 'Consulte os custos unit√°rios b√°sicos atualizados para sua obra',
        priority: 2
      },
      'precos-cub/residencial/page.tsx': {
        title: 'üè† CUB Residencial',
        subtitle: 'Custos unit√°rios b√°sicos para constru√ß√£o residencial',
        priority: 2
      },
      'precos-cub/comercial/page.tsx': {
        title: 'üè¢ CUB Comercial',
        subtitle: 'Custos unit√°rios b√°sicos para constru√ß√£o comercial',
        priority: 2
      },
      'precos-cub/detalhados/page.tsx': {
        title: 'üìä Pre√ßos Detalhados CUB',
        subtitle: 'An√°lise completa dos custos unit√°rios b√°sicos',
        priority: 2
      },
      'blog/page.tsx': {
        title: 'üìù Blog ConectaPro',
        subtitle: 'Dicas, novidades e conhecimento para profissionais da constru√ß√£o',
        priority: 3
      },
      'orcamento-3d/page.tsx': {
        title: 'üèóÔ∏è Or√ßamento 3D',
        subtitle: 'Crie or√ßamentos visuais e interativos para seus projetos',
        priority: 3
      },
      'gerador-contrato/page.tsx': {
        title: 'üìã Gerador de Contratos',
        subtitle: 'Gere contratos profissionais de forma r√°pida e segura',
        priority: 3
      },
      'admin/page.tsx': {
        title: '‚öôÔ∏è Painel Administrativo',
        subtitle: 'Gest√£o completa da plataforma ConectaPro',
        priority: 4
      }
    };
  }

  // Analisa uma p√°gina e verifica se j√° usa o design system
  analyzePageFile(filePath) {
    try {
      const content = fs.readFileSync(filePath, 'utf8');
      
      const hasPageLayout = content.includes('PageLayout');
      const hasPageCard = content.includes('PageCard');
      const hasOldStructure = content.includes('className="min-h-screen') || 
                             content.includes('className="bg-gradient-to-br');
      
      return {
        hasDesignSystem: hasPageLayout && hasPageCard,
        needsUpdate: !hasPageLayout || hasOldStructure,
        content: content
      };
    } catch (error) {
      console.log(`‚ùå Erro ao ler arquivo: ${filePath}`);
      return { hasDesignSystem: false, needsUpdate: true, content: '' };
    }
  }

  // Aplica o design system em uma p√°gina espec√≠fica
  applyDesignSystemToPage(filePath, config) {
    const analysis = this.analyzePageFile(filePath);
    
    if (analysis.hasDesignSystem) {
      console.log(`‚úÖ ${filePath} - J√° usa o design system`);
      this.appliedPages.push(filePath);
      return true;
    }

    console.log(`üîÑ Aplicando design system em: ${filePath}`);
    
    // Template b√°sico para p√°ginas
    const newPageContent = this.generatePageTemplate(config, analysis.content);
    
    try {
      // Backup do arquivo original
      fs.writeFileSync(`${filePath}.backup`, analysis.content);
      
      // Aplica o novo design
      fs.writeFileSync(filePath, newPageContent);
      
      console.log(`‚úÖ ${filePath} - Design system aplicado com sucesso!`);
      this.appliedPages.push(filePath);
      return true;
    } catch (error) {
      console.log(`‚ùå Erro ao aplicar design system em ${filePath}:`, error.message);
      this.pendingPages.push({ file: filePath, error: error.message });
      return false;
    }
  }

  // Gera template padr√£o para uma p√°gina
  generatePageTemplate(config, originalContent) {
    // Extrai imports espec√≠ficos do conte√∫do original
    const imports = this.extractImports(originalContent);
    const mainContent = this.extractMainContent(originalContent);
    
    return `"use client";
import React from "react";
${imports}
import PageLayout, { PageCard, PageButton } from "../../components/PageLayout";

export default function ${this.getComponentName(config)} {
  return (
    <PageLayout 
      title="${config.title}"
      subtitle="${config.subtitle}"
    >
      <PageCard>
        <div className="text-center mb-8">
          <h2 className="text-3xl font-bold cp-text-gradient mb-4">
            Em Desenvolvimento
          </h2>
          <p className="text-xl text-gray-600">
            Esta p√°gina est√° sendo atualizada com o novo design system.
          </p>
        </div>
        
        <div className="text-center">
          <PageButton href="/" variant="primary">
            Voltar ao In√≠cio
          </PageButton>
        </div>
      </PageCard>
      
      {/* Conte√∫do original preservado para refer√™ncia */}
      <PageCard>
        <details className="text-sm text-gray-500">
          <summary className="cursor-pointer font-semibold mb-4">
            Ver conte√∫do original (para desenvolvimento)
          </summary>
          <div className="bg-gray-50 p-4 rounded-lg">
            <pre className="whitespace-pre-wrap text-xs">
              ${this.escapeContent(originalContent.substring(0, 500))}...
            </pre>
          </div>
        </details>
      </PageCard>
    </PageLayout>
  );
}`;
  }

  // Extrai imports do conte√∫do original
  extractImports(content) {
    const lines = content.split('\n');
    const imports = [];
    
    for (const line of lines) {
      if (line.trim().startsWith('import ') && 
          !line.includes('PageLayout') && 
          !line.includes('"use client"')) {
        imports.push(line);
      }
    }
    
    return imports.join('\n');
  }

  // Extrai conte√∫do principal (placeholder para l√≥gica mais complexa)
  extractMainContent(content) {
    // Por enquanto, retorna um placeholder
    // Em uma implementa√ß√£o mais avan√ßada, poderia extrair JSX espec√≠fico
    return "// Conte√∫do original ser√° migrado gradualmente";
  }

  // Gera nome do componente baseado na configura√ß√£o
  getComponentName(config) {
    return config.title
      .replace(/[^a-zA-Z0-9]/g, '')
      .replace(/^\w/, c => c.toUpperCase()) + 'Page';
  }

  // Escapa conte√∫do para exibi√ß√£o segura
  escapeContent(content) {
    return content
      .replace(/\\/g, '\\\\')
      .replace(/`/g, '\\`')
      .replace(/\${/g, '\\${');
  }

  // Executa a aplica√ß√£o do design system em todas as p√°ginas
  async applyToAllPages() {
    console.log('üöÄ Iniciando aplica√ß√£o do Design System ConectaPro...\n');
    
    const configs = this.getPageConfigs();
    const sortedPages = Object.entries(configs)
      .sort(([,a], [,b]) => a.priority - b.priority);

    let successCount = 0;
    let totalPages = sortedPages.length;

    for (const [relativePath, config] of sortedPages) {
      const fullPath = path.join(this.pagesDirectory, relativePath);
      
      if (fs.existsSync(fullPath)) {
        const success = this.applyDesignSystemToPage(fullPath, config);
        if (success) successCount++;
      } else {
        console.log(`‚ö†Ô∏è  Arquivo n√£o encontrado: ${fullPath}`);
        this.pendingPages.push({ file: relativePath, error: 'Arquivo n√£o encontrado' });
      }
    }

    this.generateReport(successCount, totalPages);
  }

  // Gera relat√≥rio final
  generateReport(successCount, totalPages) {
    console.log('\n' + '='.repeat(60));
    console.log('üìä RELAT√ìRIO FINAL - APLICA√á√ÉO DO DESIGN SYSTEM');
    console.log('='.repeat(60));
    
    console.log(`‚úÖ P√°ginas atualizadas: ${successCount}/${totalPages}`);
    console.log(`üîÑ Taxa de sucesso: ${((successCount/totalPages) * 100).toFixed(1)}%`);
    
    if (this.appliedPages.length > 0) {
      console.log('\n‚úÖ P√ÅGINAS COM DESIGN SYSTEM APLICADO:');
      this.appliedPages.forEach(page => console.log(`   ‚Ä¢ ${page}`));
    }
    
    if (this.pendingPages.length > 0) {
      console.log('\n‚ö†Ô∏è  P√ÅGINAS PENDENTES:');
      this.pendingPages.forEach(item => 
        console.log(`   ‚Ä¢ ${item.file} - ${item.error}`)
      );
    }

    console.log('\nüéØ PR√ìXIMOS PASSOS:');
    console.log('   1. Revisar p√°ginas atualizadas');
    console.log('   2. Personalizar conte√∫do espec√≠fico');
    console.log('   3. Testar responsividade');
    console.log('   4. Validar integra√ß√£o Figma');
    
    console.log('\nüõ†Ô∏è  COMANDOS √öTEIS:');
    console.log('   ‚Ä¢ node sync-figma-to-css.js  (sincronizar cores)');
    console.log('   ‚Ä¢ npm run dev                (testar localmente)');
    
    // Gera arquivo de log
    const reportContent = this.generateDetailedReport(successCount, totalPages);
    fs.writeFileSync('design-system-application-report.md', reportContent);
    console.log('\nüìÑ Relat√≥rio detalhado salvo em: design-system-application-report.md');
  }

  // Gera relat√≥rio detalhado em markdown
  generateDetailedReport(successCount, totalPages) {
    const now = new Date().toLocaleString('pt-BR');
    
    return `# üìä Relat√≥rio de Aplica√ß√£o do Design System ConectaPro

**Data:** ${now}  
**Status:** ${successCount}/${totalPages} p√°ginas processadas (${((successCount/totalPages) * 100).toFixed(1)}%)

## ‚úÖ P√°ginas Atualizadas (${this.appliedPages.length})

${this.appliedPages.map(page => `- \`${page}\``).join('\n')}

## ‚ö†Ô∏è P√°ginas Pendentes (${this.pendingPages.length})

${this.pendingPages.map(item => `- \`${item.file}\` - ${item.error}`).join('\n')}

## üéØ Pr√≥ximas A√ß√µes

### Revis√£o e Personaliza√ß√£o
- [ ] Revisar cada p√°gina atualizada
- [ ] Personalizar conte√∫do espec√≠fico de cada se√ß√£o
- [ ] Ajustar t√≠tulos e subt√≠tulos conforme necess√°rio
- [ ] Implementar funcionalidades espec√≠ficas

### Testes e Valida√ß√£o
- [ ] Testar responsividade em mobile/desktop
- [ ] Validar integra√ß√£o com Figma
- [ ] Verificar performance e carregamento
- [ ] Testar navega√ß√£o entre p√°ginas

### Finaliza√ß√£o
- [ ] Remover arquivos de backup (.backup)
- [ ] Atualizar documenta√ß√£o
- [ ] Deploy em produ√ß√£o
- [ ] Monitorar feedback dos usu√°rios

## üõ†Ô∏è Comandos de Manuten√ß√£o

\`\`\`bash
# Sincronizar cores do Figma
node sync-figma-to-css.js

# Testar conex√£o Figma
node test-figma-connection.js

# Executar servidor de desenvolvimento
npm run dev
\`\`\`

---
*Relat√≥rio gerado automaticamente pelo Design System Applicator*
`;
  }
}

// Execu√ß√£o do script
if (require.main === module) {
  const applicator = new DesignSystemApplicator();
  applicator.applyToAllPages().catch(console.error);
}

module.exports = DesignSystemApplicator; 