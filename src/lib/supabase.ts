import { createClient } from '@supabase/supabase-js'

// Configura√ß√µes do Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || 'https://your-project.supabase.co'
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'your-anon-key'

export const supabase = createClient(supabaseUrl, supabaseAnonKey)

// Tipos para o banco de dados (baseado no schema original)
export interface ProfissionalPendente {
  id: string
  nome: string
  telefone: string
  email?: string
  servicos: string[]
  experiencia: string
  portfolio_urls?: string[]
  endereco: {
    rua: string
    bairro: string
    cidade: string
    estado: string
  }
  status: 'pendente' | 'aprovado' | 'rejeitado'
  origem: 'site' | 'whatsapp'
  dados_whatsapp?: {
    conversa_id: string
    mensagens: any[]
    audio_transcritos?: string[]
  }
  created_at: string
  updated_at: string
  aprovado_por?: string
  aprovado_em?: string
  observacoes?: string
}

export interface ProfissionalAprovado {
  id: string
  nome: string
  telefone: string
  email?: string
  servicos: string[]
  experiencia: string
  portfolio_urls?: string[]
  endereco: {
    rua: string
    bairro: string
    cidade: string
    estado: string
  }
  avaliacao_media: number
  total_avaliacoes: number
  ativo: boolean
  visivel: boolean
  created_at: string
  updated_at: string
}

export interface Avaliacao {
  id: string
  profissional_id: string
  cliente_nome: string
  cliente_telefone: string
  nota: number
  comentario?: string
  servico_realizado: string
  data_servico: string
  status: 'pendente' | 'aprovada' | 'rejeitada'
  created_at: string
}

// Fun√ß√µes para gerenciar profissionais (baseado no sistema original)
export async function salvarProfissionalPendente(dados: Omit<ProfissionalPendente, 'id' | 'created_at' | 'updated_at'>) {
  try {
    const { data, error } = await supabase
      .from('profissionais_pendentes')
      .insert([{
        ...dados,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      }])
      .select()
      .single()
    
    if (error) throw error
    return { success: true, data }
  } catch (error) {
    console.error('Erro ao salvar profissional:', error)
    return { success: false, error }
  }
}

export async function aprovarProfissional(id: string, aprovadoPor: string) {
  try {
    // 1. Buscar dados do profissional pendente
    const { data: pendente, error: errorBusca } = await supabase
      .from('profissionais_pendentes')
      .select('*')
      .eq('id', id)
      .single()
    
    if (errorBusca) throw errorBusca

    // 2. Inserir na tabela de aprovados
    const { data: aprovado, error: errorAprovacao } = await supabase
      .from('profissionais_aprovados')
      .insert([{
        nome: pendente.nome,
        telefone: pendente.telefone,
        email: pendente.email,
        servicos: pendente.servicos,
        experiencia: pendente.experiencia,
        portfolio_urls: pendente.portfolio_urls,
        endereco: pendente.endereco,
        avaliacao_media: 5.0,
        total_avaliacoes: 0,
        ativo: true,
        visivel: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      }])
      .select()
      .single()
    
    if (errorAprovacao) throw errorAprovacao

    // 3. Atualizar status do pendente
    const { error: errorUpdate } = await supabase
      .from('profissionais_pendentes')
      .update({
        status: 'aprovado',
        aprovado_por: aprovadoPor,
        aprovado_em: new Date().toISOString(),
        updated_at: new Date().toISOString()
      })
      .eq('id', id)

    if (errorUpdate) throw errorUpdate

    return { success: true, data: aprovado }
  } catch (error) {
    console.error('Erro ao aprovar profissional:', error)
    return { success: false, error }
  }
}

export async function listarProfissionaisPendentes() {
  try {
    const { data, error } = await supabase
      .from('profissionais_pendentes')
      .select('*')
      .eq('status', 'pendente')
      .order('created_at', { ascending: false })
    
    if (error) throw error
    return { success: true, data }
  } catch (error) {
    console.error('Erro ao listar pendentes:', error)
    return { success: false, error }
  }
}

export async function listarProfissionaisAprovados() {
  try {
    const { data, error } = await supabase
      .from('profissionais_aprovados')
      .select('*')
      .eq('ativo', true)
      .order('created_at', { ascending: false })
    
    if (error) throw error
    return { success: true, data }
  } catch (error) {
    console.error('Erro ao listar aprovados:', error)
    return { success: false, error }
  }
}

export async function obterEstatisticasAdmin() {
  try {
    const { data, error } = await supabase
      .from('admin_stats')
      .select('*')
      .single()
    
    if (error) throw error
    return { success: true, data }
  } catch (error) {
    console.error('Erro ao obter estat√≠sticas:', error)
    return { success: false, error }
  }
}

// Fun√ß√µes para WhatsApp
export const whatsappService = {
  // Enviar mensagem de aprova√ß√£o
  async enviarAprovacao(profissional: ProfissionalPendente) {
    const telefone = profissional.telefone.replace(/\D/g, '')
    const mensagem = `üéâ *PARAB√âNS ${profissional.nome.toUpperCase()}!*

Seu cadastro foi *APROVADO* na ConectaPro! 

‚úÖ Agora voc√™ est√° vis√≠vel para clientes
‚úÖ Seu perfil est√° ativo na plataforma
‚úÖ Voc√™ pode come√ßar a receber contatos

üîó *Acesse a plataforma:*
https://conectapro-3cxg03nfk-conecta-pro.vercel.app

üí° *DICAS IMPORTANTES:*
‚Ä¢ Responda rapidamente aos clientes
‚Ä¢ Seja educado e profissional
‚Ä¢ Cumpra os prazos combinados
‚Ä¢ Pe√ßa avalia√ß√µes ap√≥s o servi√ßo

üì± *Precisa de ajuda?*
Mande um √°udio explicando sua d√∫vida!

*ConectaPro - Conectando Profissionais em Porto Velho* üèóÔ∏è`

    return await this.enviarMensagem(telefone, mensagem, 'aprovacao', profissional.id)
  },

  // Enviar mensagem de rejei√ß√£o
  async enviarRejeicao(profissional: ProfissionalPendente, motivo?: string) {
    const telefone = profissional.telefone.replace(/\D/g, '')
    const mensagem = `‚ùå *${profissional.nome.toUpperCase()}, seu cadastro precisa de ajustes*

Infelizmente seu cadastro na ConectaPro n√£o foi aprovado.

${motivo ? `üìù *Motivo:* ${motivo}` : 'üìù *Motivos comuns:*\n‚Ä¢ Informa√ß√µes incompletas\n‚Ä¢ Dados incorretos\n‚Ä¢ Servi√ßos n√£o especificados'}

üîÑ *O QUE FAZER AGORA:*
‚Ä¢ Corrija as informa√ß√µes
‚Ä¢ Complete todos os campos
‚Ä¢ Cadastre-se novamente

üì± *Precisa de ajuda?*
Mande um √°udio e te ajudamos!

*ConectaPro - Estamos aqui para te ajudar* ü§ù`

    return await this.enviarMensagem(telefone, mensagem, 'rejeicao', profissional.id)
  },

  // Enviar lembrete
  async enviarLembrete(profissional: ProfissionalPendente) {
    const telefone = profissional.telefone.replace(/\D/g, '')
    const mensagem = `üëã *Oi ${profissional.nome}!*

Seu cadastro na ConectaPro est√° *PENDENTE* h√° alguns dias.

‚è∞ *Status: Aguardando aprova√ß√£o*

üöÄ *Em breve voc√™ estar√° vis√≠vel para clientes!*
https://conectapro-3cxg03nfk-conecta-pro.vercel.app

üì± *D√∫vidas?* Mande um √°udio!

*ConectaPro - Sua oportunidade te espera* üí™`

    return await this.enviarMensagem(telefone, mensagem, 'lembrete', profissional.id)
  },

  // Fun√ß√£o base para enviar mensagem
  async enviarMensagem(telefone: string, mensagem: string, tipo: string, profissional_id: string) {
    try {
      // Aqui voc√™ integraria com a API do WhatsApp (Evolution API, Baileys, etc.)
      // Por enquanto, vamos simular o envio
      
      // Simular envio (substituir pela integra√ß√£o real)
      console.log(`üì± WhatsApp enviado para ${telefone}:`, mensagem)
      
      // Simular resposta de sucesso
      return {
        sucesso: true,
        mensagem_id: `msg_${Date.now()}`,
        telefone,
        mensagem_enviada: mensagem
      }
    } catch (error) {
      console.error('Erro ao enviar WhatsApp:', error)
      return {
        sucesso: false,
        erro: error
      }
    }
  }
}

// Fun√ß√µes para Avalia√ß√µes
export async function listarAvaliacoesPendentes() {
  try {
    const { data, error } = await supabase
      .from('avaliacoes')
      .select(`
        *,
        profissionais_aprovados (nome, telefone)
      `)
      .eq('status', 'pendente')
      .order('created_at', { ascending: false })
    
    if (error) throw error
    return { success: true, data }
  } catch (error) {
    console.error('Erro ao listar avalia√ß√µes:', error)
    return { success: false, error }
  }
} 